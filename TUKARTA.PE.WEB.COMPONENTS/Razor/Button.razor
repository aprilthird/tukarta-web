@using Microsoft.JSInterop;

<button id="btn_@Id" class="btn @GetButtonClass() @GetButtonShape() ladda-button @(IsEnabled ? "" : "disabled")" data-style="zoom-out" type="@GetButtonType()" @onclick="OnClickCallback">
    <span class="ladda-label">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <i class="@Icon"></i>
        }
        <span>@Text</span>
    </span>
</button>

@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public ButtonTheme Theme { get; set; } = ButtonTheme.BrandPrimary;

    [Parameter]
    public ButtonType Type { get; set; } = ButtonType.Button;

    [Parameter]
    public ButtonShape Shape { get; set; } = ButtonShape.Default;

    [Parameter]
    public EventCallback OnClickCallback { get; set; }

    public bool IsEnabled { get; set; } = true;

    private Guid Id = Guid.NewGuid();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            await JSRuntime.InvokeVoidAsync("TuKarta.createLaddaButton", Id);
    }

    public async Task ShowLoaderAsync()
    {
        IsEnabled = false;
        await JSRuntime.InvokeVoidAsync("TuKarta.showLaddaLoader", Id);
    }

    public async Task HideLoaderAsync()
    {
        IsEnabled = true;
        await JSRuntime.InvokeVoidAsync("TuKarta.hideLaddaLoader", Id);
    }

    public enum ButtonType
    {
        Button, Submit
    }

    public enum ButtonTheme
    {
        BrandPrimary, BrandSecondary, BrandThird, OutlineBrandPrimary, OutlineBrandSecondary, OutlineBrandThird, Primary, Success, Danger, Info, Warning
    }

    public enum ButtonShape
    {
        Default, Square, Pill
    }

    private string GetButtonClass()
    {
        switch (Theme)
        {
            case ButtonTheme.BrandPrimary:
                return "btn-brand-primary";
            case ButtonTheme.BrandSecondary:
                return "btn-brand-secondary";
            case ButtonTheme.BrandThird:
                return "btn-brand-third";
            case ButtonTheme.OutlineBrandPrimary:
                return "btn-outline-brand-primary";
            case ButtonTheme.OutlineBrandSecondary:
                return "btn-outline-brand-secondary";
            case ButtonTheme.OutlineBrandThird:
                return "btn-outline-brand-third";
            case ButtonTheme.Primary:
                return "btn-primary";
            case ButtonTheme.Success:
                return "btn-success";
            case ButtonTheme.Danger:
                return "btn-danger";
            case ButtonTheme.Info:
                return "btn-info";
            case ButtonTheme.Warning:
                return "btn-warning";
            default:
                return "btn-brand-primary";
        }
    }

    private string GetButtonType()
    {
        switch (Type)
        {
            case ButtonType.Submit:
                return "submit";
            default:
                return "button";
        }
    }

    private string GetButtonShape()
    {
        switch(Shape)
        {
            case ButtonShape.Square:
                return "btn-square";
            case ButtonShape.Pill:
                return "btn-pill";
            default:
                return "";
        }
    }
}
