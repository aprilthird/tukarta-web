@page "/reportes/reservas"

@inject ViewModels.BookingsViewModels.IndexViewModel ViewModel
@inject IToastService ToastService

<Document Title="Reservas" />

<div class="container-fluid">
    <div class="fade-in">
        <div class="card">
            <div class="card-header d-flex justify-content-between">
                <h3>Reporte de Reservas</h3>
            </div>
            <div class="card-body">
                <RadzenGrid Data="@ViewModel.Bookings" TItem="BookingResource" AllowSorting="true" AllowFiltering="true"
                            AllowPaging="true" PageSize="10" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ColumnWidth="120px">
                    <Columns>
                        <RadzenGridColumn TItem="BookingResource" Property="Code" Title="Código" Width="70px" />
                        <RadzenGridColumn TItem="BookingResource" Property="User.Name" Title="Comensal" Width="100px" />
                        <RadzenGridColumn TItem="BookingResource" Property="Restaurant.Name" Title="Negocio" Width="100px" />
                        <RadzenGridColumn TItem="BookingResource" Property="Status" Title="Estado" Width="100px">
                            <Template Context="data">
                                @ConstantHelpers.Service.Status.VALUES[data.Status]
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="BookingResource" Property="CreatedAt" Title="Fecha de Creación" Width="120px">
                            <Template Context="data">
                                @String.Format("{0:d}", data.CreatedAt)
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="BookingResource" Property="DateTime" Title="Fecha de Reserva" Width="120px">
                            <Template Context="data">
                                @String.Format("{0:d}", data.DateTime)
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="BookingResource" Title="Opciones" Filterable="false" Sortable="false" Width="230px">
                            <Template Context="data">
                                <button class="btn btn-icon btn-brand-secondary btn-sm" @onclick="() => AcceptBookingAsync(data)">
                                    <i class="c-icon cil-check"></i>
                                    <span>Aprobar</span>
                                </button>
                                <button class="btn btn-icon btn-brand-primary btn-sm" @onclick="() => DenyBookingAsync(data)">
                                    <i class="c-icon cil-ban"></i>
                                    <span>Rechazar</span>
                                </button>
                                <button class="btn btn-icon btn-brand-third btn-sm" @*@onclick="() => ShowModal(ModalType.Detail, data)" *@>
                                    <i class="c-icon cil-paper-plane"></i>
                                    <span>Ver detalle</span>
                                </button>
                                @*<button class="btn btn-icon btn-brand-secondary" @onclick="() => ShowModal(ModalType.Edit, data)">
                                        <i class="c-icon cil-pencil"></i>
                                        <span>Editar</span>
                                    </button>
                                    <button class="btn btn-icon btn-danger" @onclick="() => DeleteAsync(data)">
                                        <i class="c-icon cil-trash"></i>
                                        <span>Eliminar</span>
                                    </button>*@
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </div>
        </div>
    </div>
</div>

<Modal @ref="Modal" Title="@ModalTitle" Size="ModalTemplate.ModalSize.ExtraLarge">
    <BookingDetail @ref="Detail" PurchaseDetail="ViewModel.Detail" />
</Modal>

<SweetAlert @ref="Alert" Title="¿Está seguro de actualizar el estado de la reserva" ButtonText="Sí, actualizarlo" Type="SweetAlert.DialogType.warning" />
<SweetAlert @ref="AlertOk" Title="Se actualizó el estado con éxito" Type="SweetAlert.DialogType.success" />
<SweetAlert @ref="AlertError" Title="Ha ocurrido un error al tratar de actualizar el estado" Type="SweetAlert.DialogType.error" />

@code {
    [CascadingParameter]
    RestaurantResource Restaurant { get; set; }

    private RadzenGrid<BookingResource> DataGrid;
    private Modal Modal;
    private BookingDetail Detail;
    private string ModalTitle;

    private SweetAlert Alert;
    private SweetAlert AlertOk;
    private SweetAlert AlertError;

    public enum ModalType
    {
        Detail
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        await ViewModel.LoadAsync();
    }

    public async Task AcceptBookingAsync(BookingResource booking)
    {
        if (await Alert.ConfirmTaskAsync())
        {
            if (await ViewModel.ChangeStatusAsync(booking.Id.Value, ConstantHelpers.Service.Status.ACCEPTED))
            {
                await AlertOk.FireAsync();
                ToastService.ShowSuccess(booking.User.RawFullName, "Se aprobo el estado de su reserva con éxito");
                await ViewModel.LoadAsync();
            }
            else
            {
                await AlertError.FireAsync(ViewModel.ErrorMessage);
                ToastService.ShowError(booking.User.RawFullName, ViewModel.ErrorMessage);
            }
        }
    }

    public async Task DenyBookingAsync(BookingResource booking)
    {
        if (await Alert.ConfirmTaskAsync())
        {
            if (await ViewModel.ChangeStatusAsync(booking.Id.Value, ConstantHelpers.Service.Status.REJECTED))
            {
                await AlertOk.FireAsync();
                ToastService.ShowSuccess(booking.User.RawFullName, "Se rechazo el estado de su reserva con éxito");
                await ViewModel.LoadAsync();
            }
            else
            {
                await AlertError.FireAsync(ViewModel.ErrorMessage);
                ToastService.ShowError(booking.User.RawFullName, ViewModel.ErrorMessage);
            }
        }
    }

    public async Task ShowModalAsync(ModalType modalType, BookingResource detail)
    {
        ModalTitle = $"Detalles de Entrega";
        await ViewModel.LoadDetailByBookingIdAsync(detail.Id.Value);
        await Modal.OpenAsync();
    }
}