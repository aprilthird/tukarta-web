@page "/restaurante/editar"
@inject ViewModels.RestaurantViewModels.EditViewModel ViewModel
@inject IToastService ToastService

<Document Title="Editar Restaurante" />

<div class="container-fluid">
    <div class="fade-in">
        <div class="card">
            <div class="card-header d-flex justify-content-between">
                <h3>Editar Restaurante</h3>
            </div>
            <div class="card-body">
                @if (ViewModel.Restaurant != null)
                {
                    <Form @ref="Form" Restaurant="ViewModel.Restaurant" ValidSubmitCallback="SaveAsync" InvalidSubmitCallback="ShowError" />
                }
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    private RestaurantResource Restaurant { get; set; }

    private Form Form;

    protected override async Task OnParametersSetAsync()
    {
        if (Restaurant != null)
        {
            if (ViewModel.RestaurantId != Restaurant.Id)
            {
                ViewModel.RestaurantId = Restaurant.Id.Value;
                await ViewModel.LoadAsync();
            }
        }
    }

    private async Task SaveAsync()
    {
        if (await ViewModel.SaveAsync(ViewModel.Restaurant, Form.SelectedFile, Form.FileStream))
        {
            ToastService.ShowSuccess(ViewModel.Restaurant.Name, "Información guardada con éxito");
        }
        else
        {
            ToastService.ShowError(ViewModel.Restaurant.Name, ViewModel.ErrorMessage);
            await Form.ShowAlertAsync(ViewModel.ErrorMessage);
        }
    }

    public void ShowError()
    {
        ToastService.ShowError("Se encontraron errores en el formulario", "Error");
    }
}
