@page "/restaurante/carta"
@inject IToastService ToastService

@inject ViewModels.MenuViewModels.IndexViewModel ViewModel
<Document Title="Carta" />

<div class="container-fluid">
    <div class="fade-in">
        <div class="card">
            <div class="card-header d-flex justify-content-between">
                <h3>Carta</h3>
                <button class="btn btn-icon btn-brand-primary" @onclick="() => ShowMenuCategoryModalAsync(ModalType.New)">
                    <i class="c-icon cil-library-add"></i>
                    <span>Nueva Categor&iacute;a</span>
                </button>
            </div>
            <div class="card-body">
                <div class="accordion" id="accordion" role="tablist">
                    @if (ViewModel.Menus != null)
                    {
                        @foreach (var menu in ViewModel.Menus)
                        {
                            <div class="card mb-0">
                                <div class="card-header d-flex justify-content-between" role="tab">
                                    <h5 class="mb-0">
                                        <a class="collapsed" data-toggle="collapse" href="#collapse_@menu.Id">@menu.Name</a>
                                    </h5>
                                    <div>
                                        <button class="btn btn-sm btn-icon btn-brand-secondary" @onclick="() => ShowMenuCategoryModalAsync(ModalType.Edit, menu)">
                                            <i class="c-icon cil-pencil"></i>
                                            <span class="d-none d-md-inline-block">Editar</span>
                                        </button>
                                        <button class="btn btn-sm btn-icon btn-danger" @onclick="() => DeleteMenuAsync(menu)">
                                            <i class="c-icon cil-trash"></i>
                                            <span class="d-none d-md-inline-block">Eliminar</span>
                                        </button>
                                        <button class="btn btn-sm btn-icon btn-brand-third" @onclick="() => ShowDishModalAsync(ModalType.New, menu)">
                                            <i class="c-icon cil-playlist-add"></i>
                                            <span class="d-none d-md-inline-block">Agregar Plato</span>
                                        </button>
                                    </div>
                                </div>
                                <div class="collapse" id="collapse_@menu.Id" role="tabpanel" data-parent="#accordion">
                                    <div class="card-body">
                                        @foreach (var dish in menu.Dishes)
                                        {
                                            <div class="card">
                                                <div class="row">
                                                    <div class="col-sm-4 col-md-12 col-xl-6">
                                                        <div class="overflow-hidden" style="height: 200px; background-image: url(@dish.PictureUrl); background-position: center; background-size: cover">
                                                            @*<img src="@restaurant.LogoUrl" alt="restaurant logo" class="img-fluid" />*@
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-8 col-md-12 col-xl-6">
                                                        <div class="card-body p-3 h-100 d-flex flex-column justify-content-between">
                                                            <div>
                                                                <div class="text-value text-brand-primary">@dish.Name</div>
                                                                <div class="text-value text-brand-secondary">
                                                                    @dish.Price.ToMoney()
                                                                </div>
                                                                <div class="text-value text-brand-third">@dish.DishCategory.Name</div>
                                                                <div class="text-muted @*text-uppercase font-weight-bold*@ small">@dish.Description</div>
                                                            </div>
                                                            <div class="d-flex justify-content-end">
                                                                <div>
                                                                    <button class="btn btn-sm btn-icon btn-brand-secondary" @onclick="() => ShowDishModalAsync(ModalType.Edit, menu, dish)">
                                                                        <i class="c-icon cil-pencil"></i>
                                                                        <span class="d-none d-md-inline-block">Editar</span>
                                                                    </button>
                                                                    <button class="btn btn-sm btn-icon btn-danger" @onclick="() => DeleteDishAsync(dish)">
                                                                        <i class="c-icon cil-trash"></i>
                                                                        <span class="d-none d-md-inline-block">Eliminar</span>
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<ModalForm @ref="ModalMenuCategoryForm" Title="@ModalTitle" Model="ModalMenuCategory" ValidSubmitCallback="SaveMenuAsync" InvalidSubmitCallback="ShowError">
    <MenuFields @ref="MenuFields" MenuCategory="ModalMenuCategory" />
</ModalForm>

<ModalForm @ref="ModalDishForm" Title="@ModalTitle" Model="ModalDish" ValidSubmitCallback="SaveDishAsync" InvalidSubmitCallback="ShowError">
    <DishFields @ref="DishFields" DishCategories="ViewModel.DishCategories" Dish="ModalDish" BeforeFileUpload="BeforeFileUploadAsync" AfterFileUpload="AfterFileUploadAsync" />
</ModalForm>

<SweetAlert @ref="Alert" Title="¿Está seguro de eliminar la categoría?" Message="Esta acción es irreversible" ButtonText="Sí, eliminarlo" Type="SweetAlert.DialogType.warning" />
<SweetAlert @ref="AlertOk" Title="Se eliminó la categoría con éxito" Type="SweetAlert.DialogType.success" />
<SweetAlert @ref="AlertError" Title="Ha ocurrido un error al tratar de eliminar la categoría" Type="SweetAlert.DialogType.error" />

@code {
    [CascadingParameter]
    private RestaurantResource Restaurant { get; set; }

    private DishResource ModalDish = new DishResource();
    private MenuCategoryResource ModalMenuCategory = new MenuCategoryResource();

    private ModalForm ModalDishForm;
    private ModalForm ModalMenuCategoryForm;
    private DishFields DishFields;
    private MenuFields MenuFields;
    private string ModalTitle;

    private SweetAlert Alert;
    private SweetAlert AlertOk;
    private SweetAlert AlertError;

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadDishCategoriesAsync();
    }

    public enum ModalType
    {
        New, Edit
    };

    protected override async Task OnParametersSetAsync()
    {
        if (Restaurant != null)
        {
            if (Restaurant.Id != ViewModel.RestaurantId)
            {
                ViewModel.RestaurantId = Restaurant.Id.Value;
                await ViewModel.LoadAsync();
                StateHasChanged();
            }
        }
    }

    public async Task ShowMenuCategoryModalAsync(ModalType modalType, MenuCategoryResource menuCategory = null)
    {
        ModalTitle = $"{(modalType == ModalType.New ? "Nuevo" : "Editar")} Categoría de Plato";
        ModalMenuCategory = menuCategory ?? new MenuCategoryResource();
        await ModalMenuCategoryForm.OpenAsync();
    }

    public async Task SaveMenuAsync()
    {

        if (await ViewModel.SaveMenuCategoryAsync(ModalMenuCategory))
        {
            ToastService.ShowSuccess(ModalMenuCategory.Name, "Registro guardado con éxito");
            await ViewModel.LoadAsync();
            await ModalMenuCategoryForm.CloseAsync();
        }
        else
        {
            ToastService.ShowError(ModalMenuCategory.Name, ViewModel.ErrorMessage);
            await ModalMenuCategoryForm.ShowAlertAsync(ViewModel.ErrorMessage);
        }
    }

    public async Task DeleteMenuAsync(MenuCategoryResource menuCategory)
    {
        if (await Alert.ConfirmTaskAsync())
        {
            if (await ViewModel.DeleteMenuAsync(menuCategory.Id.Value))
            {
                await AlertOk.FireAsync();
                ToastService.ShowSuccess(menuCategory.Name, "Se eliminó la categoría de la carta con éxito");
                await ViewModel.LoadAsync();
            }
            else
            {
                await AlertError.FireAsync(ViewModel.ErrorMessage);
                ToastService.ShowError(menuCategory.Name, ViewModel.ErrorMessage);
            }
        }
    }

    public async Task ShowDishModalAsync(ModalType modalType, MenuCategoryResource menu, DishResource dish = null)
    {
        ModalTitle = $"{(modalType == ModalType.New ? "Nuevo" : "Editar")} Plato";
        ModalDish = dish ?? new DishResource() { MenuCategoryId = menu.Id.Value };
        await ModalDishForm.OpenAsync();
    }

    public async Task SaveDishAsync()
    {
        if (await ViewModel.SaveDishAsync(ModalDish, DishFields.SelectedFile, DishFields.FileStream))
        {
            ToastService.ShowSuccess(ModalDish.Name, "Registro guardado con éxito");
            await ViewModel.LoadAsync();
            await ModalDishForm.CloseAsync();
        }
        else
        {
            ToastService.ShowError(ModalDish.Name, ViewModel.ErrorMessage);
            await ModalDishForm.ShowAlertAsync(ViewModel.ErrorMessage);
        }
    }

    public void ShowError()
    {
        ToastService.ShowError("Se encontraron errores en el formulario", "Error");
    }

    public async Task BeforeFileUploadAsync()
    {
        await ModalDishForm.SubmitButton.ShowLoaderAsync();
    }

    public async Task AfterFileUploadAsync()
    {
        await ModalDishForm.SubmitButton.HideLoaderAsync();
    }

    public async Task DeleteDishAsync(DishResource dish)
    {
        if (await Alert.ConfirmTaskAsync())
        {
            if (await ViewModel.DeleteDishAsync(dish.Id.Value))
            {
                await AlertOk.FireAsync();
                ToastService.ShowSuccess(dish.Name, "Se eliminó la categoría con éxito");
                await ViewModel.LoadAsync();
            }
            else
            {
                await AlertError.FireAsync(ViewModel.ErrorMessage);
                ToastService.ShowError(dish.Name, ViewModel.ErrorMessage);
            }
        }
    }
}

